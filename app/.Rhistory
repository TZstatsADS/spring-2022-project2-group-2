filter(period == "contemporary") %>%
arrange(sentiment) %>%
head(5) %>% select(linenumber))[[1]])
data_new2 %>%
filter(period == "contemporary") %>%
filter(row_number() %in% (period_sen_byline %>%
filter(period == "contemporary") %>%
arrange(sentiment) %>%
head(5) %>% select(linenumber))[[1]]) %>%
select(sentence_str)
data_new2 %>%
filter(period == "contemporary") %>%
filter(row_number() %in% (period_sen_byline %>%
filter(period == "contemporary") %>%
arrange(sentiment) %>%
head(5) %>% select(linenumber))[[1]]) %>%
select(school, author, sentence_str)
data_new2 %>%
filter(period == "contemporary") %>%
filter(row_number() %in% (period_sen_byline %>%
filter(period == "contemporary") %>%
arrange(sentiment) %>%
head(5) %>% select(linenumber))[[1]]) %>%
select(school, author, sentence_str)
period_sen_byline <- period_unnest %>%
inner_join(get_sentiments("bing")) %>%
count(period, linenumber, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
data_new2 %>%
filter(period == "contemporary") %>%
filter(row_number() %in% (period_sen_byline %>%
filter(period == "contemporary") %>%
arrange(sentiment) %>%
head(5) %>% select(linenumber))[[1]]) %>%
select(school,, sentence_str)
period_sen_byline <- period_unnest %>%
inner_join(get_sentiments("bing")) %>%
count(period, linenumber, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
data_new2 %>%
filter(period == "contemporary") %>%
filter(row_number() %in% (period_sen_byline %>%
filter(period == "contemporary") %>%
arrange(sentiment) %>%
head(5) %>% select(linenumber))[[1]]) %>%
select(sentence_str)
data_new2 %>%
filter(period == "modern") %>%
filter(row_number() %in% (period_sen_byline %>%
filter(period == "modern") %>%
arrange(desc(sentiment)) %>%
head(5) %>% select(linenumber))[[1]]) %>%
select(sentence_str)
View(school_sentiment)
school_unnest <- data_new2 %>%
select(school, period, sentence_str) %>%
group_by(school) %>%
mutate(linenumber = row_number()) %>%
ungroup() %>%
unnest_tokens(word, sentence_str)
school_sentiment <- school_unnest %>%
inner_join(get_sentiments("bing")) %>%
count(school, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
View(school_unnest)
school_unnest %>%
inner_join(get_sentiments("bing")) %>%
count(school, index = linenumber %/% 80, sentiment)
school_unnest <- data_new2 %>%
select(school, sentence_str) %>%
group_by(school) %>%
mutate(linenumber = row_number()) %>%
ungroup() %>%
unnest_tokens(word, sentence_str)
school_sentiment <- school_unnest %>%
inner_join(get_sentiments("bing")) %>%
count(school, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
sen_school <- ggplot(school_sentiment, aes(index, sentiment)) +
geom_col(show.legend = FALSE, fill = color2[7]) +
facet_wrap(~ school, ncol = 5, scales = "free_x")
sen_school
school_sentiment <- school_unnest %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(school, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
sen_school <- ggplot(school_sentiment, aes(index, sentiment)) +
geom_col(show.legend = FALSE, fill = color2[7]) +
facet_wrap(~ school, ncol = 5, scales = "free_x")
sen_school
period_sentiment <- period_unnest %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(period, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
sen_period <- ggplot(period_sentiment, aes(index, sentiment)) +
geom_col(show.legend = FALSE, fill = color2[7]) +
facet_wrap(~ period, ncol = 5, scales = "free_x")
sen_period
period_sen_byline <- period_unnest %>%
inner_join(get_sentiments("bing"), by = "word") %>%
count(period, linenumber, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
data_new2 %>%
filter(period == "contemporary") %>%
filter(row_number() %in% (period_sen_byline %>%
filter(period == "contemporary") %>%
arrange(sentiment) %>%
head(5) %>% select(linenumber))[[1]]) %>%
select(sentence_str)
library(abind)
library(tidyverse)
install.packages(shiny)
install.packages('shiny')
library(shiny)
library(shiny)
ui <- fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
server <- function(input, output, session) {
library(shiny)
ui <- fluidPage(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
library(shiny)
ui <- fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
wellPanel(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel(
plotOutput("plot")
)
tabPanel()
library(shiny)
ui <- fluidPage(
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel(
plotOutput("plot")
),
tabPanel(),
tabPanel()
)
)
)
library(shiny)
ui <- fluidPage(
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel('test1', plotOutput("plot"),
tabPanel(),
tabPanel()
)
)
)
server <- function(input, output, session) {
library(shiny)
ui <- fluidPage(
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel('test1', plotOutput("plot")),
tabPanel(),
tabPanel()
)
)
)
library(shiny)
ui <- fluidPage(
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel('test1', h4("test1"), plotOutput("plot")),
tabPanel(),
tabPanel()
)
)
)
library(shiny)
ui <- fluidPage(
headerPanel("Test"),
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel('test1', h4("test1"), plotOutput("plot")),
tabPanel(),
tabPanel()
)
)
)
library(shiny)
ui <- fluidPage(
headerPanel("Test"),
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel('test1', h4("test1"), plotOutput("plot")),
)
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
headerPanel("Test"),
wellPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
tabsetPanel(
tabPanel('test1', h4("test1"), plotOutput("plot")),
)
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel('111', h4('111'),
sidebarLayout(
sidebarPanel('side')
mainPanel('main')
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel('111', h4('111'),
sidebarLayout(
sidebarPanel('side'),
mainPanel('main')
)),
tabPanel('222', h4('222'),
sidebarLayout(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
)
)
server <- function(input, output, session) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
}
shinyApp(ui, server)
getwd()
data <- read.csv('/Users/javier/downloads')
data <- read.csv('/Users/javier/download')
data <- read.csv('/Users/javier/downloads/NYPD_Arrest_Data__Year_to_Date_')
data <- read.csv('/Users/javier/download/NYPD_Arrest_Data__Year_to_Date_')
data <- read.csv('/Users/javier/downloads/NYPD_Arrest_Data__Year_to_Date_')
data <- read.csv('/Users/javier/downloads/NYPD_Arrest_Data__Year_to_Date_.csv')
View(data)
setwd('/Users/javier/Documents/Study/Graduate/ADS/spring-2022-project2-group-2/app')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(emo)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
